{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"mkdocs-git-authors-plugin","text":"<p>Lightweight MkDocs plugin to display git authors of a markdown page.</p>"},{"location":"index.html#setup","title":"Setup","text":"<p>Install the plugin using pip3:</p> <pre><code>pip3 install mkdocs-git-authors-plugin\n</code></pre> <p>Next, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- search\n- git-authors\n</code></pre> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p> <p>Using build environments</p> <p>This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to:</p> <p>Change your CI settings</p> <ul> <li>github actions: set <code>fetch_depth</code> to <code>0</code> (docs)</li> <li>gitlab runners: set <code>GIT_DEPTH</code> to <code>1000</code> (docs)</li> <li>bitbucket pipelines: set <code>clone: depth: full</code> (docs)</li> </ul>"},{"location":"contributing.html","title":"Contribution Guidelines","text":"<p>Thanks for considering to contribute to this project! Some guidelines:</p> <ul> <li>Read the Roadmap / Vision</li> <li>Go through the issue list and if needed create a relevant issue to discuss the change design. On disagreements, maintainer(s) will have the final word.</li> <li>You can expect a response from a maintainer within 7 days. If you haven\u2019t heard anything by then, feel free to ping the thread.</li> <li>This package tries to be as simple as possible for the user (hide any complexity from the user). Options are only added when there is clear value to the majority of users.</li> <li>When issues or pull requests are not going to be resolved or merged, they should be closed as soon as possible. This is kinder than deciding this after a long period. Our issue tracker should reflect work to be done.</li> </ul>"},{"location":"contributing.html#unit-tests","title":"Unit Tests","text":"<p>Make sure to install an editable version before running tests:</p> <pre><code>pip install -r tests/test_requirements.txt\npip install -e .\npytest --cov=mkdocs_git_authors_plugin --cov-report term-missing tests\n</code></pre> <p>If it makes sense, writing tests for your PRs is always appreciated and will help get them merged.</p> <p>In addition, this project uses pyflakes for static code checking:</p> <pre><code>pip install pyflakes\npyflakes tests/ mkdocs_git_authors_plugin/\n</code></pre>"},{"location":"contributing.html#manual-testing","title":"Manual testing","text":"<p>To quickly serve a website with your latest changes to the plugin use the sites in our tests suite. For example:</p> <pre><code>pip install -r tests/test_requirements.txt\npip install -e .\nmkdocs serve -f ./tests/basic_setup/mkdocs_complete_material.yml\n</code></pre>"},{"location":"contributing.html#code-style","title":"Code Style","text":"<p>Make sure your code roughly follows PEP-8 and keeps things consistent with the rest of the code. I recommended using black to automatically format your code.</p> <p>We use google-style docstrings.</p>"},{"location":"contributing.html#documentation-site","title":"Documentation site","text":"<p>Manually deployed by Tim Vink using</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"mailmap.html","title":"Aggregating Authors","text":"<p>In some repositories authors may have committed with differing name/email combinations. In order to prevent the output being split it is possible to aggregate authors on arbitrary elements by providing a file <code>.mailmap</code> in the repository's root directory. This is a feature of Git itself. The following example will aggregate the contributions of Jane Doe committed under two email addresses:</p> <pre><code># .mailmap\nJane Doe &lt;jane.doe@company.com&gt; &lt;jane.doe@private-email.com&gt;\n</code></pre> <p>This will map commits made with the <code>private-email.com</code> to the company address. For more details and further options (e.g. mapping between different names or misspellings etc. see the git-blame documentation.</p>"},{"location":"options.html","title":"Options","text":"<p>You can customize the plugin by setting options in your <code>mkdocs.yml</code> file. Here is an example of all the options this plugin offers:</p> <pre><code>plugins:\n- git-authors:\nshow_contribution: true\nshow_line_count: true\nshow_email_address: true\ncount_empty_lines: true\nfallback_to_empty: false\nsort_authors_by: name\nauthorship_threshold_percent: 10\nexclude:\n- index.md\nenabled: true\nstrict: true\n</code></pre>"},{"location":"options.html#show_contribution","title":"<code>show_contribution</code>","text":"<p>If this option is set to <code>true</code> (default: <code>false</code>) the contribution of a author is printed as a percentage of (source file) lines per author. The output is suppressed if there is only one author for a page.</p> <p>Example output:</p> <ul> <li>Authors: John Doe (33.33%), Jane Doe (66.67%) (more than one author)</li> <li>Authors: John Doe (one author)</li> </ul>"},{"location":"options.html#show_line_count","title":"<code>show_line_count</code>","text":"<p>If this option is set to <code>true</code> (default: <code>false</code>) the number of lines per author is shown.</p>"},{"location":"options.html#show_email_address","title":"<code>show_email_address</code>","text":"<p>If this option is set to <code>true</code> (default: <code>true</code>), then authors' names are rendered as a <code>mailto:</code> link pointing to their email address. If set to <code>false</code>, they are shown in plain text.</p>"},{"location":"options.html#count_empty_lines","title":"<code>count_empty_lines</code>","text":"<p>If this option is set to <code>true</code> (default: <code>false</code>) empty lines will count towards an authors' contribution.</p>"},{"location":"options.html#fallback_to_empty","title":"<code>fallback_to_empty</code>","text":"<p>If this option is set to <code>true</code> (default: <code>false</code>) the plugin will work even outside of a proper Git environment, prompting a warning when it's the case, and resulting in empty author list.</p>"},{"location":"options.html#exclude","title":"<code>exclude</code>","text":"<p>Default is empty. Specify a list of page source paths (one per line) that should not have author(s) included (excluded from processing by this plugin). This can be useful for example to remove the authors from the front page. The source path of a page is relative to your <code>docs/</code> folder. You can also use globs instead of full source paths. To exclude <code>docs/subfolder/page.md</code> specify in your <code>mkdocs.yml</code> a line under <code>exclude:</code> with <code>- subfolder/page.md</code>. Some examples:</p> <pre><code># mkdocs.yml\nplugins:\n- git-authors:\nexclude:\n- index.md\n- subfolder/page.md\n- another_page.md\n- folder/*\n</code></pre>"},{"location":"options.html#sort_authors_by","title":"<code>sort_authors_by</code>","text":"<p>Defaults to <code>name</code>, can be <code>contribution</code> to sort the authors by contribution percentage without needing to show the exact percent.</p>"},{"location":"options.html#authorship_threshold_percent","title":"<code>authorship_threshold_percent</code>","text":"<p>Default is <code>0</code>, allowed values between <code>0</code> and <code>100</code>. This option sets the minimum contribution percentage for an author to be included in the list of authors. This can be useful when you have a large number of single line authors who contributed minor spelling fixes, and not major content. This option does not apply if there is only one author.</p>"},{"location":"options.html#enabled","title":"<code>enabled</code>","text":"<p>Default is <code>true</code>. Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times and/or do not have git available. It's recommended to use this option with an environment variable together with a default fallback (introduced in <code>mkdocs</code> v1.2.1, see docs). Example:</p> <pre><code># mkdocs.yml\nplugins:\n- git-authors:\nenabled: !ENV [ENABLED_GIT_AUTHORS, True]\n</code></pre> <p>Which enables you do disable the plugin locally using:</p> <pre><code>export ENABLED_GIT_AUTHORS=false\nmkdocs serve\n</code></pre>"},{"location":"options.html#strict","title":"<code>strict</code>","text":"<p>Default is <code>true</code>. When enabled, the logs will show warnings when something is wrong but a fallback has been used. When disabled, the logger will use the INFO level instead.</p> <ul> <li>If you want to raise an error when a warning is logged, use mkdocs strict mode (with <code>mkdocs build --strict</code>).</li> <li>If you are already using mkdocs strict mode, but do not care about these warnings, you can set <code>strict: false</code> to ensure no errors are raised.</li> </ul> <p>=== \":octicons-file-code-16: mkdocs.yml\"</p> <pre><code>plugins:\n- git-authors:\nstrict: true\n</code></pre>"},{"location":"usage.html","title":"Usage","text":""},{"location":"usage.html#in-supported-themes","title":"In supported themes","text":"<p>no supported themes yet.</p>"},{"location":"usage.html#in-markdown-pages","title":"In markdown pages","text":"<p>You can use the following jinja tags to insert content into your markdown pages:</p> <ul> <li><code>{{\u00a0git_page_authors }}</code> a summary of the authors of a page. Output wrapped in <code>&lt;span class='git-page-authors'&gt;</code></li> <li><code>{{\u00a0git_site_authors }}</code> a summary of all authors of all pages in your site. Output wrapped in <code>&lt;span class='git-site-authors'&gt;</code></li> </ul> <p>For example, adding <code>Tim Vink</code> could insert:</p> <pre><code>&lt;span class='git-page-authors'&gt;&lt;a href='mailto:jane@abc.com'&gt;Jane Doe&lt;/a&gt;&lt;a href='mailto:john@abc.com'&gt;John Doe&lt;/a&gt;&lt;/span&gt;\n</code></pre> <p>Which renders as:</p> <p>Jane Doe, John Doe</p>"},{"location":"usage.html#in-theme-customizations","title":"In theme customizations","text":"<p>MkDocs offers possibilities to customize an existing theme. See two examples below:</p>"},{"location":"usage.html#mkdocs-material-theme","title":"mkdocs-material theme","text":"<p>If you use the mkdocs-material theme you can implement git-authors by overriding a template block:</p> <p>1) Create a new file <code>main.html</code> in <code>docs/overrides</code>:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n  {{ super() }}\n\n  {% if git_page_authors %}\n    &lt;div class=\"md-source-date\"&gt;\n      &lt;small&gt;\n          Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }}\n      &lt;/small&gt;\n    &lt;/div&gt;\n  {% endif %}\n{% endblock %}\n</code></pre> <p>2) In <code>mkdocs.yml</code> make sure to specify the custom directory with the theme overrides:</p> <pre><code>theme:\nname: material\ncustom_dir: docs/overrides\n</code></pre>"},{"location":"usage.html#mkdocs-theme","title":"mkdocs theme","text":"<p>In the default MkDocs theme we can use overriding partials to add the git-authors info below the page content.</p> <p>1) Create a new file <code>content.html</code> in <code>docs/overrides</code>:</p> <pre><code>&lt;!-- Overwrites content.html base mkdocs theme, taken from \nhttps://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --&gt;\n\n{% if page.meta.source %}\n    &lt;div class=\"source-links\"&gt;\n    {% for filename in page.meta.source %}\n        &lt;span class=\"label label-primary\"&gt;{{ filename }}&lt;/span&gt;\n    {% endfor %}\n    &lt;/div&gt;\n{% endif %}\n\n{{ page.content }}\n\n{% if git_page_authors %}\n  &lt;p&gt;&lt;small&gt;Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }}&lt;/small&gt;&lt;/p&gt;\n{% endif %}\n</code></pre> <p>2) In <code>mkdocs.yml</code> make sure to specify the custom directory with the theme overrides:</p> <pre><code>theme:\nname: mkdocs\ncustom_dir: docs/overrides\n</code></pre>"},{"location":"usage.html#in-theme-templates","title":"In theme templates","text":"<p>To add more detailed git author information to your theme you can customize a MkDocs theme or even develop your own. </p> <p>When enabling this plugin, you will have access to the jinja2 variable <code>git_info</code> which contains as dict with the following structure:</p> <pre><code>{\n  'page_authors' : [\n    {\n    'name' : 'Jane Doe',\n    'email' : 'jane@abc.com',\n    'last_datetime' : datetime.datetime(),\n    'lines' : 200,\n    'contribution' : '40.0%'\n  },\n  {\n    'name' : 'John Doe',\n    'email' : 'john@abc.com',\n    'last_datetime' : datetime.datetime(),\n    'lines' : 300,\n    'contribution' : '60.0%'\n  }\n ],\n 'site_authors' : # same structure\n}\n</code></pre>"},{"location":"usage.html#example-usage-in-theme-development","title":"Example usage in theme development","text":"<p>An example of how to use in your templates:</p> <pre><code>{% if git_info %}\n  {%- for author in git_info.get('page_authors') -%}\n    &lt;a href=\"{{ author.email }}\" title=\"{{ author.name }}\"&gt;\n      {{ author.name }}\n    &lt;/a&gt;,\n  {%- endfor -%}\n{% endif %}\n</code></pre> <p>Alternatively, you could use the simple pre-formatted <code>Tim Vink</code> to insert a summary of the authors.</p>"}]}